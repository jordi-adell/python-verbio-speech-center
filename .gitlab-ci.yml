stages:
  - lint
  - test
  - build
  - testing-promote
  - testing-integration
  - staging-promote
  - staging-deploy
  - staging-e2e
  - release-promote
  - release-deploy
  - cleanup

image: docker.registry.verbio.com/engineering/devops/debian10-citbx-cpp-rust:latest

variables:
  RUSTC_WRAPPER: sccache
  RUST_BACKTRACE: "FULL"
  MODELS_PATH: /mnt/shared/squad2/projects/asr4models/
  DOCKER_TESTING_IMAGE_NAME: docker.registry.verbio.com/csr/testing/asr4
  DOCKER_STAGING_IMAGE_NAME: docker.registry.verbio.com/csr/staging/asr4
  DOCKER_RELEASE_IMAGE_NAME: docker.registry.verbio.com/csr/stable/asr4
  DOCKER_IMAGE_VERSION: 0.0.12


rust:lint:stable:
  stage: lint
  image: docker.registry.verbio.com/rust/centos:stable
  script:
    - cargo --version
    - rustc --version
    - cargo fmt --all -- --check
    - cargo clippy --all --all-targets -- -D warnings

rust:lint:nightly:
  stage: lint
  image: docker.registry.verbio.com/rust/centos:stable
  allow_failure: true
  script:
    - cargo +nightly --version
    - cargo fmt --all -- --check
    - cargo +nightly clippy --all --all-targets -- -D warnings

python:lint:
  stage: lint
  before_script:
    - pip install flake8==3.9.2 black==22.6.0
  script:
    - black --check .
    - flake8 --exit-zero --show-source --statistics


rust:test:all:
  stage: test
  image: docker.registry.verbio.com/rust/centos:stable
  script:
    - cargo --version
    - cargo test --all

python:test:cpu:
  stage: test
  before_script:
    - pip install torch==1.12.1+cpu --extra-index-url https://download.pytorch.org/whl/cpu
    - pip install .[server,cpu,test]
    - citbx install packages verbio-verbio8k-es-es-am
  script:
    - python --version
    - pytest tests/unit tests/functional --junit-xml=report.xml --verbose
  artifacts:
    expire_in: 5 days
    reports:
      junit: report.xml

python:test:gpu:
  stage: test
  tags:
    - gpu
  image: docker.registry.verbio.com/engineering/devops/debian10-citbx-cpp-rust-torch-gpu:latest
  before_script:
    - source ~/.bashrc
    - CUDACXX=/usr/local/cuda/bin/nvcc LDFLAGS="-L/root/miniconda3/lib/ -liomp5" pip install .[server,gpu,test]
    - citbx install packages verbio-verbio8k-es-es-am
  script:
    - python --version
    - pytest tests/unit tests/functional --junit-xml=report.xml --verbose
  artifacts:
    expire_in: 5 days
    reports:
      junit: report.xml


rust:test:coverage:
  stage: test
  before_script:
    - cargo install cargo-tarpaulin
  script:
    - cargo tarpaulin -o Html --all --avoid-cfg-tarpaulin
  artifacts:
    expire_in: 30 days
    paths:
      - tarpaulin-report.html
  coverage: '/^(\d+\.\d*)\% coverage, .+$/'

python:test:coverage:
  stage: test
  before_script:
    - pip install torch==1.12.1+cpu --extra-index-url https://download.pytorch.org/whl/cpu
    - pip install .[server,cpu,test]
    - citbx install packages verbio-verbio8k-es-es-am
    - echo 'deb [ arch=amd64,any ] https://pkg-repos.lan.verbio.com/deb/internal jessie staging' >> /etc/apt/sources.list
    - apt-get update && apt-get install -y -t jessie asrtest-tools libffi-dev jq
    - pip install .[client,test]
  script:
    - pytest tests/unit tests/functional --cov=asr4 --cov-report=html:coverage --cov-report=term --verbose
    - pytest tests/integration --junit-xml=report.xml --verbose --capture=no
  services:
    - name: ${DOCKER_TESTING_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}
      alias: asr4-server
      variables:
        LANGUAGE: en-us

  artifacts:
    expire_in: 30 days
    paths:
      - coverage/**
  coverage: '/^TOTAL\s+\d+\s+\d+\s+(\d+\.?\d*)\%$/'

python:test:coverage:gpu:
  stage: test
  tags:
    - gpu
  image: docker.registry.verbio.com/engineering/devops/debian10-citbx-cpp-rust-torch-gpu:latest
  before_script:
    - source ~/.bashrc
    - CUDACXX=/usr/local/cuda/bin/nvcc LDFLAGS="-L/root/miniconda3/lib/ -liomp5" pip install .[server,gpu,test]
    - citbx install packages verbio-verbio8k-es-es-am
  script:
    - pytest tests/unit tests/functional --cov=asr4 --cov-report=html:coverage --cov-report=term --verbose
  artifacts:
    expire_in: 30 days
    paths:
      - coverage/**
  coverage: '/^TOTAL\s+\d+\s+\d+\s+(\d+\.?\d*)\%$/'


rust:build:latest_bin:
  stage: build
  only:
    - tags
  script:
    - cargo --version
    - cargo build --release
    # - cpack -G "DEB;RPM" ./
    # - cargo deb -v
    # - mv *.deb ../
    # - mv *.rpm ../
  artifacts:
    expire_in: 2 days
    paths:
      - "*.deb"
      - "*.rpm"

python:build:latest_bin:
  stage: build
  only:
    - tags
  before_script:
    - echo JOB_ID=$CI_JOB_ID >> job.env
  script:
    - export MAKEFLAGS="-j4"
    - pip install build grpcio grpcio-tools
    - python -m build
    - python -m grpc_tools.protoc --proto_path=proto --include_imports --include_source_info --descriptor_set_out=proto/asr4-${DOCKER_IMAGE_VERSION}.pb asr4.proto
    - mv dist/*.whl .
    - mv proto/*.pb .
  artifacts:
    expire_in: 2 days
    untracked: true
    paths:
      - "*.whl"
      - "*.pb"
    reports:
      dotenv: job.env


.testing:promote:
  stage: testing-promote
  image: docker:20.10.15
  parallel:
    matrix:
      - LANGUAGE: [en-us, es, pt-br]
  only:
    - tags
  needs: ["python:build:latest_bin"]
  script:
    - echo "IMAGE_NAME=${IMAGE_NAME}"
    - mv *.whl deploy/docker/
    - cp ${MODELS_PATH}/asr4-${LANGUAGE}-${DOCKER_IMAGE_VERSION}.onnx deploy/docker/
    - cp ${MODELS_PATH}/asr4-${LANGUAGE}-${DOCKER_IMAGE_VERSION}.dict.ltr.txt deploy/docker/
    - cp ${MODELS_PATH}/formatter/format-model.${LANGUAGE}* deploy/docker/
    - cp bin/server.py deploy/docker/
    - cd deploy/docker/
    - docker build . -f ${DOCKERFILE} --build-arg VERSION=${DOCKER_IMAGE_VERSION} --build-arg LANGUAGE=${LANGUAGE} -t "${IMAGE_NAME}"
    - docker push "${IMAGE_NAME}"

testing:promote:cpu:
  variables:
    IMAGE_NAME: "${DOCKER_TESTING_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    DOCKERFILE: "Dockerfile.debian"
  extends: .testing:promote

testing:promote:gpu:
  variables:
    IMAGE_NAME: "${DOCKER_TESTING_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    DOCKERFILE: "Dockerfile.debian-gpu"
  extends: .testing:promote


.testing:integration:
  stage: testing-integration
  only:
    - tags
  before_script:
    - yum-config-manager --enable verbio-internal-staging
    - yum install -y asrtest-tools
    - pip install .[client,test]

  script:
    - python --version
    - pytest tests/integration --junit-xml=report.xml --verbose --capture=no
  artifacts:
    expire_in: 5 days
    reports:
      junit: report.xml

testing:integration:en-us:cpu:
  extends: .testing:integration
  needs: ["testing:promote:cpu"]
  variables:
    LANGUAGE: en-us
  services:
    - name: ${DOCKER_TESTING_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}
      alias: asr4-server
      variables:
        LANGUAGE: en-us

testing:integration:es:cpu:
  extends: .testing:integration
  needs: ["testing:promote:cpu"]
  variables:
    LANGUAGE: es
  services:
    - name: ${DOCKER_TESTING_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}
      alias: asr4-server
      variables:
        LANGUAGE: es

testing:integration:pt-br:cpu:
  extends: .testing:integration
  needs: [ "testing:promote:cpu" ]
  variables:
    LANGUAGE: pt-br
  services:
    - name: ${DOCKER_TESTING_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}
      alias: asr4-server
      variables:
        LANGUAGE: pt-br

testing:integration:en-us:gpu:
  extends: .testing:integration
  needs: [ "testing:promote:gpu" ]
  tags:
    - gpu
  allow_failure: true
  variables:
    LANGUAGE: en-us
  services:
    - name: ${DOCKER_TESTING_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}
      alias: asr4-server
      variables:
        LANGUAGE: en-us

testing:integration:es:gpu:
  extends: .testing:integration
  needs: [ "testing:promote:gpu" ]
  tags:
    - gpu
  allow_failure: true
  variables:
    LANGUAGE: es
  services:
    - name: ${DOCKER_TESTING_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}
      alias: asr4-server
      variables:
        LANGUAGE: es

testing:integration:pt-br:gpu:
  extends: .testing:integration
  needs: [ "testing:promote:gpu" ]
  tags:
    - gpu
  allow_failure: true
  variables:
    LANGUAGE: pt-br
  services:
    - name: ${DOCKER_TESTING_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}
      alias: asr4-server
      variables:
        LANGUAGE: pt-br

staging:promote:
  stage: staging-promote
  image: docker:20.10.15
  parallel:
    matrix:
      - LANGUAGE: [en-us, es, pt-br]
  only:
    - tags
  needs: ["testing:integration:en-us:cpu", "testing:integration:es:cpu", "testing:integration:pt-br:cpu", "testing:integration:en-us:gpu", "testing:integration:es:gpu", "testing:integration:pt-br:gpu"]
  script:
    - OLD_NAME="${DOCKER_TESTING_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - NEW_NAME="${DOCKER_STAGING_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - docker tag $OLD_NAME $NEW_NAME
    - docker push $NEW_NAME
    - OLD_NAME="${DOCKER_TESTING_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - NEW_NAME="${DOCKER_STAGING_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - docker tag $OLD_NAME $NEW_NAME
    - docker push $NEW_NAME

#tbd: where do we deploy with GPU

staging:deploy:cpu:
  stage: staging-deploy
  image: docker.registry.verbio.com/cognitive/nomad:1.0.2
  only:
    - tags
  needs: ["staging:promote", "python:build:latest_bin"]
  environment:
    name: pre-production/asr4
    action: start
  script:
    - cd deploy/nomad
    - export NOMAD_IP=$(echo ${CI_ENVIRONMENT_URL} | cut -d / -f 3 | cut -d ':' -f 1)
    - export NOMAD_ADDR=http://$NOMAD_IP:4646
    - echo "Deploying CPU staging version ${DOCKER_IMAGE_VERSION} into ${NOMAD_ADDR}"
    - NOMAD_VAR_VERSION=${DOCKER_IMAGE_VERSION} NOMAD_VAR_ASR4_JOB_ID=${JOB_ID} NOMAD_VAR_GITLAB_TOKEN=${GITLAB_TOKEN} nomad job run asr4-staging.nomad

staging:deploy:gpu:
  stage: staging-deploy
  image: docker.registry.verbio.com/cognitive/nomad:1.0.2
  only:
    - tags
  needs: ["staging:promote", "python:build:latest_bin"]
  environment:
    name: pre-production/asr4
    action: start
  script:
    - cd deploy/nomad
    - export NOMAD_IP=$(echo ${CI_ENVIRONMENT_URL} | cut -d / -f 3 | cut -d ':' -f 1)
    - export NOMAD_ADDR=http://$NOMAD_IP:4646
    - echo "Deploying GPU staging version ${DOCKER_IMAGE_VERSION} into ${NOMAD_ADDR}"
    - NOMAD_VAR_VERSION=${DOCKER_IMAGE_VERSION} NOMAD_VAR_ASR4_JOB_ID=${JOB_ID} NOMAD_VAR_GITLAB_TOKEN=${GITLAB_TOKEN} nomad job run asr4-staging-gpu.nomad



staging:e2e:cpu:
  stage: staging-e2e
  image: "${DOCKER_STAGING_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
  parallel:
    matrix:
      - LANGUAGE: [en-us, es, pt-br]
  only:
    - tags
  needs: ["staging:deploy:cpu"]
  script:
    - echo "E2E tests for new release"

staging:e2e:gpu:
  stage: staging-e2e
  tags:
    - gpu
  image: "${DOCKER_STAGING_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
  parallel:
    matrix:
      - LANGUAGE: [en-us, es, pt-br]
  only:
    - tags
  needs: ["staging:deploy:gpu"]
  script:
    - echo "E2E tests for GPU new release"

release:promote:
  stage: release-promote
  image: docker:20.10.15
  parallel:
    matrix:
      - LANGUAGE: [en-us, es, pt-br]
  only:
    - tags
  needs: ["staging:e2e:cpu", "staging:e2e:gpu"]
  script:
    - OLD_NAME="${DOCKER_STAGING_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - NEW_NAME="${DOCKER_RELEASE_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - docker tag $OLD_NAME $NEW_NAME
    - docker push $NEW_NAME
    - OLD_NAME="${DOCKER_STAGING_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - NEW_NAME="${DOCKER_RELEASE_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - docker tag $OLD_NAME $NEW_NAME
    - docker push $NEW_NAME

release:deploy:
  stage: release-deploy
  image: docker.registry.verbio.com/cognitive/nomad:1.0.2
  only:
    - tags
  needs: ["release:promote", "python:build:latest_bin"]
  script:
    - echo "deploy new release in pre-production"
    - cd deploy/nomad
    # - NOMAD_VAR_VERSION=${DOCKER_IMAGE_VERSION} NOMAD_VAR_ASR4_JOB_ID=${JOB_ID} NOMAD_VAR_GITLAB_TOKEN=${GITLAB_TOKEN} NOMAD_VAR_STAGE=staging nomad job run asr4-staging.nomad


cleanup:
  stage: cleanup
  image: docker:20.10.15
  parallel:
    matrix:
      - LANGUAGE: [en-us, es, pt-br]
  only:
    - tags
  script:
    - docker image rm "${DOCKER_TESTING_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - docker image rm "${DOCKER_STAGING_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - docker image rm "${DOCKER_RELEASE_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - docker image rm "${DOCKER_TESTING_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - docker image rm "${DOCKER_STAGING_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - docker image rm "${DOCKER_RELEASE_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
