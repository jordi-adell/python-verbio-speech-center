include:
  remote: 'https://gitlab.com/gitlab-org/gitlab/-/raw/2851f4d5/lib/gitlab/ci/templates/Jobs/SAST.latest.gitlab-ci.yml'

stages:
  - test
  #- unit-tests
  #- functional-tests
  #- integration-tests
  - build-package
  - build-image
  #- integration-tests-with-docker
  - promote-to-staging
  #- end2end-testing
  #- update-changelog
  - promote-to-stable
  - cleanup
  #- speech-center-integration-testing

image: docker.registry.verbio.com/engineering/devops/debian10-citbx-cpp-rust:1.11.7

variables:
  DOCKER_IMAGE_VERSION: $CI_COMMIT_REF_SLUG
  MODELS_PATH: /mnt/shared/squad2/projects/asr4models/
  VERBIO_REGISTRY_URL: docker.registry.verbio.com
  DOCKER_TESTING_IMAGE_NAME:  csr/testing/asr4
  DOCKER_STAGING_IMAGE_NAME:  csr/staging/asr4
  DOCKER_STABLE_IMAGE_NAME:   csr/stable/asr4
  DOCKER_SPEECH_CENTER_IMAGE_NAME: voice-center/testing/asr4
  AWS_REGION: us-east-1
  AWS_SC_REGION: us-east-2
  AWS_ECR_URL: 321880733545.dkr.ecr.us-east-1.amazonaws.com
  SPEECH_CENTER_AWS_ECR_URL: 321880733545.dkr.ecr.us-east-2.amazonaws.com
  AWS_ACCOUNT_ID_ECR: 321880733545


.install-python:
  before_script:
    - pip config set global.extra-index-url https://__token__:glpat-REETc2aBAZBgzuD5hu2j@gitlab.lan.verbio.com/api/v4/projects/1560/packages/pypi/simple/

settings:
  stage: .pre
  rules:
    - if: $CI_COMMIT_TAG
      variables:
        DOCKER_IMAGE_VERSION: $CI_COMMIT_TAG
    - when: always
  script:
    - echo "DOCKER_IMAGE_VERSION=${DOCKER_IMAGE_VERSION}" | tee -a settings.env
  artifacts:
    reports:
      dotenv: settings.env

#
#lint:python:
#  stage: unit-tests
#  rules:
#    - when: always
#  before_script:
#    - pip install flake8==3.9.2 black==22.6.0
#  script:
#    - black --check --diff .
#    - flake8 --exit-zero --show-source --statistics


#unit-testing:
#  stage: unit-tests
#  rules:
#    - when: always
#  before_script:
#    - !reference [.install-python, before_script]
#    - pip install .[client,server,cpu,test]
#  script:
#    - python3 --version
#    - pytest tests/unit --junit-xml=report.xml --cov=asr4_streaming --cov-config=.coveragerc --cov-report=html:coverage --cov-report=term --verbose
#  artifacts:
#    expire_in: 5 days
#    reports:
#      junit: report.xml
#    paths:
#      - coverage/**
#  coverage: '/^TOTAL\s+\d+\s+\d+\s+(\d+\.?\d*)\%$/'
#
#
#functional-testing:
#  stage: functional-tests
#  needs: ["unit-testing"]
#  only:
#    - tags
#    - merge_requests
#    - master
#    - web
#  before_script:
#    - !reference [.install-python, before_script]
#    - pip install .[server,cpu,test]
#  script:
#    - pytest tests/functional --junit-xml=report.xml --verbose

#
#functional-testing:long-audios:
#  stage: functional-tests
#  needs: ["unit-testing"]
#  image: docker.registry.verbio.com/csr/devops/asr4-base-gpu:latest
#  tags:
#    - gpu
#  only:
#    - tags
#    - merge_requests
#    - master
#    - web
#  before_script:
#    - !reference [.install-python, before_script]
#    - pip install .[server,gpu,test]
#  script:
#    - export W2V_GPU=true
#    - pytest tests/functional/test_streaming_requests.py --verbose
#    - pytest tests/functional/test_long_files.py --verbose


#functional-testing:e2e:
#  stage: functional-tests
#  needs: ["unit-testing"]
#  only:
#    - tags
#    - merge_requests
#    - master
#    - web
#  before_script:
#    - python -m venv venv-server
#    - . ./venv-server/bin/activate
#    - !reference [.install-python, before_script]
#    - pip install .[server,cpu]
#    - bash tests/integration/launch_server.sh tests/integration/data/asr4_streaming_config_en-us.toml
#  script:
#    - apt-get -y -q update && apt-get install -y asrtest-eval
#    - deactivate
#    - python -m venv venv-client
#    - . ./venv-client/bin/activate
#    - pip install .[client]
#    - ./tests/e2e/run_metrics.sh en-us 0.0.0.0:50051 tests/e2e/data/test_en-us_upgraded-small.gui tests/e2e/data/expected_metrics_functional_testing.json


#integration-testing:cpu:
#  stage: integration-tests
#  needs: ["unit-testing"]
#  only:
#    - tags
#    - merge_requests
#    - web
#    - master
#  parallel:
#    matrix:
#      - LANGUAGE: [en-us, es, pt-br]
#  before_script:
#    - !reference [.install-python, before_script]
#    - pip install .[client,server,cpu,test]
#    - bash tests/integration/launch_server.sh tests/integration/data/asr4_streaming_config_${LANGUAGE}.toml 0
#    - apt-get update && apt-get install -y asrtest-eval libffi-dev
#  script:
#    - pytest tests/integration -rA --junit-xml=report.xml --verbose --capture=no


#integration-testing:gpu:
#  extends: integration-testing:cpu
#  image: docker.registry.verbio.com/engineering/devops/debian10-intel-oneapi-python-cuda-tensorrt:3.9
#  tags:
#    - gpu
#  before_script:
#    - . /opt/intel/oneapi/setvars.sh
#    - !reference [.install-python, before_script]
#    - CUDACXX=/usr/local/cuda/bin/nvcc LDFLAGS="-L/intelpython/python3.9/lib/ -liomp5" pip install .[client,server,gpu,test]
#    - bash tests/integration/launch_server.sh tests/integration/data/asr4_streaming_config_${LANGUAGE}.toml 1
#    - wget -O - https://pkg-repos.lan.verbio.com/gpg/internal/deb/F2EACE0B.gpg.key | apt-key add -
#    - echo 'deb https://pkg-repos.lan.verbio.com/deb/internal jessie stable' | tee /etc/apt/sources.list.d/verbio-internal.list
#    - apt-get update && apt-get install -y asrtest-eval libffi-dev
#  script:
#    - pytest tests/integration -rA --junit-xml=report.xml --verbose --capture=no


build-package:python:
  stage: build-package
  only:
    - tags
    - merge_requests
    - web
  before_script:
    - echo JOB_ID=$CI_JOB_ID >> settings.env
    - echo "DOCKER_IMAGE_VERSION = ${DOCKER_IMAGE_VERSION}" >> settings.env
  script:
    - export MAKEFLAGS="-j4"
    - pip install build grpcio grpcio-tools
    - python3 -m build
    - python3 -m grpc_tools.protoc --proto_path=proto --include_imports --include_source_info --descriptor_set_out=proto/asr4-${DOCKER_IMAGE_VERSION}.pb asr4.proto
    - mv dist/*.whl .
    - mv proto/*.pb .
  artifacts:
    expire_in: 2 days
    untracked: true
    paths:
      - "*.whl"
      - "*.pb"
    reports:
      dotenv: settings.env


build-image:build:cpu:
  variables:
    IMAGE_NAME: "${VERBIO_REGISTRY_URL}/${DOCKER_TESTING_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    DOCKERFILE: "Dockerfile.debian"
    DEVICE: "cpu"
  extends: .template:docker_build
  only:
    - web
    - merge_requests

build-image:build:gpu:
  variables:
    IMAGE_NAME: "${VERBIO_REGISTRY_URL}/${DOCKER_TESTING_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    DEVICE: "gpu"
    DOCKERFILE: "Dockerfile.debian-gpu"
  extends: .template:docker_build
  only:
    - web
    - merge_requests


build-image:release:cpu:
  variables:
    IMAGE_NAME: "${VERBIO_REGISTRY_URL}/${DOCKER_TESTING_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    DOCKERFILE: "Dockerfile.debian"
    DEVICE: "cpu"
  extends: .template:docker_deploy
  only:
    - tags

build-image:release:gpu:
  variables:
    IMAGE_NAME: "${VERBIO_REGISTRY_URL}/${DOCKER_TESTING_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    DEVICE: "gpu"
    DOCKERFILE: "Dockerfile.debian-gpu"
  extends: .template:docker_deploy
  only: 
    - tags

.template:docker_build:
  stage: build-image
  image: docker:20.10.15
  needs: ["build-package:python"]
  parallel:
    matrix:
      - LANGUAGE: [en-us, es, pt-br]
  before_script:
    - !reference [.export-docker-build-env, before_script]
    - cp ${MODELS_PATH}/asr4-${LANGUAGE}-${MODEL_VERSION}.onnx deploy/docker/
    - cp ${MODELS_PATH}/asr4-${LANGUAGE}-${MODEL_VERSION}.dict.ltr.txt deploy/docker/
    - cp ${MODELS_PATH}/wav2vec_small_10m.dynamic.uint8.onnx deploy/docker/
    - cp ${MODELS_PATH}/wav2vec_small_10m.dynamic.uint8.dict.ltr.txt deploy/docker/
    - cp ${MODELS_PATH}/asr4-${LANGUAGE}-lm-${LM_VERSION}.bin deploy/docker/
    - cp ${MODELS_PATH}/asr4-${LANGUAGE}-lm-${LM_VERSION}.lexicon.txt deploy/docker/
    - cp $(ls ${MODELS_PATH}/formatter/format-model.${LANGUAGE}* | head -n 1) deploy/docker/
    - mv *.whl deploy/docker/
    - cp asr4_streaming_config_${LANGUAGE}.toml deploy/docker/
    - cp bin/server.py deploy/docker/
  script:
    - docker build --pull deploy/docker/ -f deploy/docker/${DOCKERFILE} --build-arg PIPELINE=${CI_PIPELINE_IID} --build-arg VERSION=${SERVICE_VERSION} --build-arg LANGUAGE=${LANGUAGE} --build-arg MODEL_VERSION=${MODEL_VERSION} --build-arg LM_VERSION=${LM_VERSION} -t "${IMAGE_NAME}"

.export-docker-build-env:
  before_script:
    - wget https://github.com/freshautomations/stoml/releases/download/v0.7.1/stoml_linux_amd64 -O /bin/stoml && chmod +x /bin/stoml
    - export MODEL_VERSION=$(stoml asr4_streaming_config_${LANGUAGE}.toml global.${DEVICE}_version)
    - echo MODEL_VERSION=${MODEL_VERSION}
    - export LM_VERSION=$(stoml asr4_streaming_config_${LANGUAGE}.toml global.lm_version)
    - echo LM_VERSION=${LM_VERSION}
    - SERVICE_VERSION=$(cat VERSION)
    - echo SERVICE_VERSION=${SERVICE_VERSION}
    - echo "IMAGE_NAME=${IMAGE_NAME}"

.template:docker_deploy:
    extends: .template:docker_build
    after_script:
      - docker push "${IMAGE_NAME}"
      - docker pull "${IMAGE_NAME}"
    
#
#testing:integration-tests-with-docker:cpu:
#  extends: .template:integration-testing-docker
#  variables:
#    DEVICE: "cpu"
#
#testing:integration-tests-with-docker:gpu:
#  extends: .template:integration-testing-docker
#  variables:
#    DEVICE: "gpu"
#  tags:
#    - gpu

.template:integration-testing-docker:
  stage: integration-tests-with-docker
  only:
    - tags
    - web
  parallel:
    matrix:
      - LANGUAGE: [en-us, es, pt-br]
  before_script:
    - !reference [.install-docker, before_script]
    - !reference [.run-docker-image, before_script]
    - !reference [.install-python, before_script]
    - apt-get update && apt-get install -y asrtest-eval libffi-dev
    - pip install .[client,cpu,test]
    - !reference [.run-docker-image, script]
  script:
    - pytest tests/integration/test_recognizer_service.py --junit-xml=report.xml --verbose --capture=no
    - pytest tests/integration/test_formatter.py --junit-xml=report.xml --verbose --capture=no
  after_script:
    - !reference [.run-docker-image, after_script]

.run-docker-image:
  variables:
    DEVICE: "cpu"    
  before_script:
    # Get JOB DOCKER ID to run the ASR4-batch container in the same docker network
    - export JOB_DOCKER_ID=$(docker ps -q -f "label=com.gitlab.gitlab-runner.job.id=$CI_JOB_ID" -f "label=com.gitlab.gitlab-runner.type=build")
    # Kill any lingering ASR4 instance
    - docker kill asr4-${DEVICE}-${LANGUAGE} || true && docker rm asr4-${DEVICE}-${LANGUAGE} || true
  script:
    - >
      if [ "${DEVICE}" == "cpu" ]; then
        docker run --name asr4-${DEVICE}-${LANGUAGE} -d --network="container:$JOB_DOCKER_ID" -e LOG_LEVEL="DEBUG" ${VERBIO_REGISTRY_URL}/${DOCKER_TESTING_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}
      else
        docker run --name asr4-${DEVICE}-${LANGUAGE} -d --gpus=all --network="container:$JOB_DOCKER_ID" -e LOG_LEVEL="DEBUG" ${VERBIO_REGISTRY_URL}/${DOCKER_TESTING_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}
      fi
    - sleep 30
  after_script:
    # Show ASR4-batch logs before killing the instance
    - docker logs asr4-${DEVICE}-${LANGUAGE} || true
    # Kill ASR4-batch instance
    - docker kill asr4-${DEVICE}-${LANGUAGE} || true && docker rm asr4-batch-${DEVICE}-${LANGUAGE} || true

.install-docker:
  before_script:
    - apt-get update && apt-get install -y lsb-release
    - curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/docker.gpg
    - echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/docker.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    - apt-get update && apt-get install -y docker-ce docker-ce-cli containerd.io


staging:promote:
  stage: promote-to-staging
  image: docker:24
  only:
    - tags
  parallel:
    matrix:
      - LANGUAGE: [en-us, es, pt-br]
  before_script:
    - export SCRIPTS_DIR=$(mktemp -d)
    - git clone -q "$SCRIPTS_REPO" "$SCRIPTS_DIR"
    - cd "$SCRIPTS_DIR"
    - git checkout chore/update-upload-script
  script:
    - OLD_NAME="${VERBIO_REGISTRY_URL}/${DOCKER_TESTING_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - NEW_CPU_NAME="${VERBIO_REGISTRY_URL}/${DOCKER_STAGING_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - docker tag $OLD_NAME $NEW_CPU_NAME
    - docker push $NEW_CPU_NAME
    - OLD_NAME="${VERBIO_REGISTRY_URL}/${DOCKER_TESTING_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - NEW_GPU_NAME="${VERBIO_REGISTRY_URL}/${DOCKER_STAGING_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - echo $OLD_NAME $NEW_GPU_NAME
    - docker tag $OLD_NAME $NEW_GPU_NAME
    - docker push $NEW_GPU_NAME
    - echo "Push to Amazon"
    #- export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID_DEV} AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY_DEV} AWS_REGION=${AWS_REGION}
    - sh create_ecr_repository.sh "${DOCKER_TESTING_IMAGE_NAME}-gpu-${LANGUAGE}" ECS-AssumeRole-Squad2
    - sh create_ecr_repository.sh "${DOCKER_TESTING_IMAGE_NAME}-${LANGUAGE}" ECS-AssumeRole-Squad2
    #- sh deploy/docker/amazon_login.sh "${AWS_ACCESS_KEY_ID}" "${AWS_SECRET_ACCESS_KEY}" "${AWS_REGION}" "${AWS_ECR_URL}" "${DOCKER_TESTING_IMAGE_NAME}" "${LANGUAGE}"
    - docker tag $NEW_CPU_NAME "${AWS_ECR_URL}/${DOCKER_TESTING_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - docker push "${AWS_ECR_URL}/${DOCKER_TESTING_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - docker tag $NEW_GPU_NAME "${AWS_ECR_URL}/${DOCKER_TESTING_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - docker push "${AWS_ECR_URL}/${DOCKER_TESTING_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"


#asr4:benchmark:
#  stage: end2end-testing
#  only:
#    - tags
#  variables:
#    # A Gitlab bug requires this variable to be CI_COMMIT_TAG instead of DOCKER_IMAGE_VERSION
#    TF_VAR_asr4_version: ${CI_COMMIT_TAG}
#  trigger:
#    project: csr/asr4-benchmark
#    strategy: depend


#update-changelog:
#  stage: update-changelog
#  image: docker.registry.verbio.com/engineering/devops/debian10-citbx:latest
#  only:
#    - tags
#  except:
#    - branches
#  script:
#    - citbx create release --private-token ${PRIVATE_TOKEN} --project-id ${CI_PROJECT_ID} --branch ${CI_DEFAULT_BRANCH} --no-manual-review --manual-version ${CI_COMMIT_TAG}


stable:promote:
  stage: promote-to-stable
  image: docker:24
  only:
    - tags
  parallel:
    matrix:
      - LANGUAGE: [en-us, es, pt-br]
  script:
    - OLD_NAME="${VERBIO_REGISTRY_URL}/${DOCKER_STAGING_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - NEW_CPU_NAME="${VERBIO_REGISTRY_URL}/${DOCKER_STABLE_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - docker tag $OLD_NAME $NEW_CPU_NAME
    - docker push $NEW_CPU_NAME
    - OLD_NAME="${VERBIO_REGISTRY_URL}/${DOCKER_STAGING_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - NEW_GPU_NAME="${VERBIO_REGISTRY_URL}/${DOCKER_STABLE_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - docker tag $OLD_NAME $NEW_GPU_NAME
    - docker push $NEW_GPU_NAME


speech-center:promote:
  stage: promote-to-stable
  image: docker:24
  only:
    - tags
  parallel:
    matrix:
      - LANGUAGE: [en-us, es, pt-br]
  before_script:
    - export SCRIPTS_DIR=$(mktemp -d)
    - git clone -q "$SCRIPTS_REPO" "$SCRIPTS_DIR"
    - cd "$SCRIPTS_DIR"
    - git checkout chore/update-upload-script
  script:
    - OLD_NAME="${VERBIO_REGISTRY_URL}/${DOCKER_STAGING_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - NEW_CPU_NAME="${VERBIO_REGISTRY_URL}/${DOCKER_SPEECH_CENTER_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - NEW_LATEST_NAME="${VERBIO_REGISTRY_URL}/${DOCKER_SPEECH_CENTER_IMAGE_NAME}-${LANGUAGE}:latest"
    - docker tag $OLD_NAME $NEW_CPU_NAME
    - docker tag $OLD_NAME $NEW_LATEST_NAME
    - docker push $NEW_CPU_NAME
    - docker push $NEW_LATEST_NAME
    - OLD_NAME="${VERBIO_REGISTRY_URL}/${DOCKER_STAGING_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - NEW_GPU_NAME="${VERBIO_REGISTRY_URL}/${DOCKER_SPEECH_CENTER_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - NEW_LATEST_NAME="${VERBIO_REGISTRY_URL}/${DOCKER_SPEECH_CENTER_IMAGE_NAME}-gpu-${LANGUAGE}:latest"
    - docker tag $OLD_NAME $NEW_GPU_NAME
    - docker tag $OLD_NAME $NEW_LATEST_NAME
    - docker push $NEW_GPU_NAME
    - docker push $NEW_LATEST_NAME
    - echo "Push to Amazon"
    - sh create_ecr_repository.sh "${DOCKER_SPEECH_CENTER_IMAGE_NAME}-gpu-${LANGUAGE}" ECS-AssumeRole-Squad2
    - sh create_ecr_repository.sh "${DOCKER_SPEECH_CENTER_IMAGE_NAME}-${LANGUAGE}" ECS-AssumeRole-Squad2
    #- sh deploy/docker/amazon_login.sh "${AWS_ACCESS_KEY_ID}" "${AWS_SECRET_ACCESS_KEY}" "${AWS_SC_REGION}" "${SPEECH_CENTER_AWS_ECR_URL}" "${DOCKER_SPEECH_CENTER_IMAGE_NAME}" "${LANGUAGE}"
    - docker tag $NEW_CPU_NAME "${SPEECH_CENTER_AWS_ECR_URL}/${DOCKER_SPEECH_CENTER_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - docker push "${SPEECH_CENTER_AWS_ECR_URL}/${DOCKER_SPEECH_CENTER_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - docker tag $NEW_GPU_NAME "${SPEECH_CENTER_AWS_ECR_URL}/${DOCKER_SPEECH_CENTER_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - docker push "${SPEECH_CENTER_AWS_ECR_URL}/${DOCKER_SPEECH_CENTER_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"


cleanup:
  stage: cleanup
  image: docker:24
  only:
    - tags
    - merge_requests
  script:
    - docker images --filter "label=service=asr4-batch" --filter "label=pipeline=${CI_PIPELINE_IID}"
    - docker images --filter "label=service=asr4-batch" --filter "label=pipeline=${CI_PIPELINE_IID}" -q | xargs -r docker image rm --force


#speech-center-integration-testing:en-us:cpu:
#  variables:
#    TEST_SERVICE_NAME: "asr4-en-us"
#    # A Gitlab bug requires this variable to be CI_COMMIT_TAG instead of DOCKER_IMAGE_VERSION
#    TEST_SERVICE_COMMIT_TAG: ${CI_COMMIT_TAG}
#  extends: .template:speech-center-integration-testing
#
#speech-center-integration-testing:es:cpu:
#  variables:
#    TEST_SERVICE_NAME: "asr4-es"
#    # A Gitlab bug requires this variable to be CI_COMMIT_TAG instead of DOCKER_IMAGE_VERSION
#    TEST_SERVICE_COMMIT_TAG: ${CI_COMMIT_TAG}
#  extends: .template:speech-center-integration-testing
#
#speech-center-integration-testing:pt-br:cpu:
#  variables:
#    TEST_SERVICE_NAME: "asr4-pt-br"
#    # A Gitlab bug requires this variable to be CI_COMMIT_TAG instead of DOCKER_IMAGE_VERSION
#    TEST_SERVICE_COMMIT_TAG: ${CI_COMMIT_TAG}
#  extends: .template:speech-center-integration-testing
#
#speech-center-integration-testing:en-us:gpu:
#  variables:
#    TEST_SERVICE_NAME: "asr4-gpu-en-us"
#    # A Gitlab bug requires this variable to be CI_COMMIT_TAG instead of DOCKER_IMAGE_VERSION
#    TEST_SERVICE_COMMIT_TAG: ${CI_COMMIT_TAG}
#  extends: .template:speech-center-integration-testing
#
#speech-center-integration-testing:es:gpu:
#  variables:
#    TEST_SERVICE_NAME: "asr4-gpu-es"
#    # A Gitlab bug requires this variable to be CI_COMMIT_TAG instead of DOCKER_IMAGE_VERSION
#    TEST_SERVICE_COMMIT_TAG: ${CI_COMMIT_TAG}
#  extends: .template:speech-center-integration-testing
#
#speech-center-integration-testing:pt-br:gpu:
#  variables:
#    TEST_SERVICE_NAME: "asr4-gpu-pt-br"
#    # A Gitlab bug requires this variable to be CI_COMMIT_TAG instead of DOCKER_IMAGE_VERSION
#    TEST_SERVICE_COMMIT_TAG: ${CI_COMMIT_TAG}
#  extends: .template:speech-center-integration-testing
#
#.template:speech-center-integration-testing:
#  stage: speech-center-integration-testing
#  only:
#    - tags
#  trigger:
#    project: voice-center/operations/integration/integration-tests
#    strategy: depend
