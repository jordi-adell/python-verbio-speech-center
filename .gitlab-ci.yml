stages:
  - lint
  - test
  - test
  - build
  - docker
  - testing
  - testing-promote
  - staging
  - staging-promote
  - release
  - cleanup

image: docker.registry.verbio.com/engineering/devops/debian10-citbx-cpp-rust:latest

variables:
  RUSTC_WRAPPER: sccache
  RUST_BACKTRACE: "FULL"
  MODELS_PATH: /mnt/shared/squad2/projects/asr4models/
  DOCKER_TESTING_IMAGE_NAME: docker.registry.verbio.com/csr/testing/asr4
  DOCKER_STAGING_IMAGE_NAME: docker.registry.verbio.com/csr/staging/asr4
  DOCKER_RELEASE_IMAGE_NAME: docker.registry.verbio.com/csr/stable/asr4
  DOCKER_IMAGE_VERSION: ${CI_COMMIT_REF_NAME}


rust:lint:stable:
  stage: lint
  image: docker.registry.verbio.com/rust/centos:stable
  script:
    - cargo --version
    - rustc --version
    - cargo fmt --all -- --check
    - cargo clippy --all --all-targets -- -D warnings

rust:lint:nightly:
  stage: lint
  image: docker.registry.verbio.com/rust/centos:stable
  allow_failure: true
  script:
    - cargo +nightly --version
    - cargo fmt --all -- --check
    - cargo +nightly clippy --all --all-targets -- -D warnings

python:lint:
  stage: lint
  before_script:
    - pip install flake8==3.9.2 black==22.6.0
  script:
    - black --check .
    - flake8 --exit-zero --show-source --statistics


rust:test:all:
  stage: test
  image: docker.registry.verbio.com/rust/centos:stable
  script:
    - cargo --version
    - cargo test --all

python:test:all:
  stage: test
  before_script:
    - pip install torch==1.12.1+cpu --extra-index-url https://download.pytorch.org/whl/cpu
    - pip install .[server,test]
    - citbx install packages verbio-verbio8k-es-es-am
  script:
    - python --version
    - pytest --junit-xml=report.xml --verbose
  artifacts:
    expire_in: 5 days
    reports:
      junit: report.xml

python:test:client:
  stage: test
  before_script:
    - pip install .[client]
  script:
    - python --version
    - python bin/client.py --host 192.168.2.4:50051 -a  /mnt/db/CSR/en-us/8_kHz/test_db/multidomain/ITmaintenance/HH/gdit_cut/0a357d4b-c065-46d3-bbb4-16c4808fe974_transcription-00:11:30_490-00:11:34_270.wav

rust:test:coverage:
  stage: test
  before_script:
    - cargo install cargo-tarpaulin
  script:
    - cargo tarpaulin -o Html --all --avoid-cfg-tarpaulin
  artifacts:
    expire_in: 30 days
    paths:
      - tarpaulin-report.html
  coverage: '/^(\d+\.\d*)\% coverage, .+$/'

python:test:coverage:
  stage: test
  before_script:
    - pip install torch==1.12.1+cpu --extra-index-url https://download.pytorch.org/whl/cpu
    - pip install .[server,test]
    - citbx install packages verbio-verbio8k-es-es-am
  script:
    - pytest --cov=asr4 --cov-report=html:coverage --cov-report=term --verbose
  artifacts:
    expire_in: 30 days
    paths:
      - coverage/**
  coverage: '/^TOTAL\s+\d+\s+\d+\s+(\d+\.?\d*)\%$/'


rust:build:latest_bin:
  stage: build
  only:
    - tags
  script:
    - cargo --version
    - cargo build --release
#    - cpack -G "DEB;RPM" ./
#    - cargo deb -v
#    - mv *.deb ../
#    - mv *.rpm ../
  artifacts:
    expire_in: 2 days
    paths:
      - "*.deb"
      - "*.rpm"

python:build:latest_bin:
  stage: build
  only:
    - tags
  script:
    - export MAKEFLAGS="-j4"
    - pip install wheel grpcio grpcio-tools
    - python setup.py sdist bdist_wheel
    - python -m grpc_tools.protoc --proto_path=proto --include_imports --include_source_info --descriptor_set_out=proto/asr4-${DOCKER_IMAGE_VERSION}.pb asr4.proto
    - mv dist/*.whl .
    - mv proto/*.pb .
  artifacts:
    expire_in: 2 days
    paths:
      - "*.whl"
      - "*.pb"

testing:docker:
  stage: docker
  image: docker:20.10.15
  parallel:
    matrix:
      - LANGUAGE: [en-us, es, pt-br]
  only:
    - tags
  dependencies:
    - python:build:latest_bin     
  script:
    - IMAGE_NAME="${DOCKER_TESTING_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - echo "IMAGE_NAME=${IMAGE_NAME}"
    - mv *.whl deploy/docker/
    - cp ${MODELS_PATH}/asr4-${LANGUAGE}-${DOCKER_IMAGE_VERSION}.onnx deploy/docker/
    - cp ${MODELS_PATH}/asr4-${LANGUAGE}-${DOCKER_IMAGE_VERSION}.dict.ltr.txt deploy/docker/
    - cp ${MODELS_PATH}/formatter/format-model.${LANGUAGE}* deploy/docker/
    - cp bin/server.py deploy/docker/
    - cp requirements.txt deploy/docker/
    - cd deploy/docker/
    - docker build . -f Dockerfile.debian --build-arg VERSION=${DOCKER_IMAGE_VERSION} --build-arg LANGUAGE=${LANGUAGE} -t "${IMAGE_NAME}"
    - docker push "${IMAGE_NAME}"


testing:test_images:integration:
  stage: testing
  image: "${DOCKER_TESTING_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
  parallel:
    matrix:
      - LANGUAGE: [en-us, es, pt-br]
  only:
    - tags
  script:
    - echo "integration tests here"

testing:deploy:
  stage: testing-promote
  image: docker.registry.verbio.com/cognitive/nomad:1.0.2
  only:
    - tags
  environment:
    name: pre-production/asr4 
    action: start
  script:
    - cd deploy/nomad
    - export NOMAD_IP=$(echo ${CI_ENVIRONMENT_URL} | cut -d / -f 3 | cut -d ':' -f 1)
    - export NOMAD_ADDR=http://$NOMAD_IP:4646
    - echo "Deploying testing version ${DOCKER_IMAGE_VERSION} into ${NOMAD_ADDR}"
    - NOMAD_VAR_VERSION=${DOCKER_IMAGE_VERSION} nomad job run asr4-staging.nomad

testing:promote:
  stage: testing-promote
  image: docker:20.10.15
  parallel:
    matrix:
      - LANGUAGE: [en-us, es, pt-br]
  only:
    - tags
  script:
    - OLD_NAME="${DOCKER_TESTING_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - NEW_NAME="${DOCKER_STAGING_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - docker tag $OLD_NAME $NEW_NAME
    - docker push $NEW_NAME


staging:test_images:functional:
  stage: staging
  image: "${DOCKER_STAGING_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
  parallel:
    matrix:
      - LANGUAGE: [en-us, es, pt-br]
  only:
    - tags
  script:
    - echo "functional tests for new release"

staging:promote:
  stage: staging-promote
  image: docker:20.10.15
  parallel:
    matrix:
      - LANGUAGE: [en-us, es, pt-br]
  only:
    - tags
  script:
    - OLD_NAME="${DOCKER_STAGING_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - NEW_NAME="${DOCKER_RELEASE_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - docker tag $OLD_NAME $NEW_NAME
    - docker push $NEW_NAME

release:deploy:
  stage: release
  image: docker.registry.verbio.com/cognitive/nomad:1.0.2
  only:
    - tags
  script:
    - echo "deploy new release in pre-production"
    - cd deploy/nomad
#    - NOMAD_VAR_VERSION=${DOCKER_IMAGE_VERSION} NOMAD_VAR_STAGE=staging nomad job run asr4-staging.nomad


cleanup:
  stage: cleanup
  image: docker:20.10.15
  parallel:
    matrix:
      - LANGUAGE: [en-us, es, pt-br]
  only:
    - tags
  script:
    - docker image rm "${DOCKER_TESTING_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - docker image rm "${DOCKER_STAGING_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - docker image rm "${DOCKER_RELEASE_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"

