stages:
  - lint
  - test
  - package
  - build-image
  - integration-testing
  - promote-to-staging
  - end2end-testing
  - update-changelog
  - promote-to-stable
  - stable-deploy
  - cleanup
  - speech-center-integration-testing

image: docker.registry.verbio.com/engineering/devops/debian10-citbx-cpp-rust:latest

variables:
  DOCKER_IMAGE_VERSION: $CI_COMMIT_REF_SLUG
  MODELS_PATH: /mnt/shared/squad2/projects/asr4models/
  VERBIO_REGISTRY_URL: docker.registry.verbio.com
  AWS_ECR_URL: 321880733545.dkr.ecr.us-east-1.amazonaws.com
  SPEECH_CENTER_AWS_ECR_URL: 321880733545.dkr.ecr.us-east-2.amazonaws.com
  AWS_REGION: us-east-1
  AWS_SC_REGION: us-east-2
  DOCKER_TESTING_IMAGE_NAME:  csr/testing/asr4
  DOCKER_STAGING_IMAGE_NAME:  csr/staging/asr4
  DOCKER_STABLE_IMAGE_NAME:   csr/stable/asr4
  DOCKER_SPEECH_CENTER_IMAGE_NAME: voice-center/testing/asr4

settings:
  stage: .pre
  rules:
    - if: $CI_COMMIT_TAG
      variables:
        DOCKER_IMAGE_VERSION: $CI_COMMIT_TAG
    - when: always
  script:
    - echo "DOCKER_IMAGE_VERSION=${DOCKER_IMAGE_VERSION}" | tee -a settings.env
  artifacts:
    reports:
      dotenv: settings.env

lint:python:
  stage: lint
  only:
    - tags
    - merge_requests
    - pushes
    - branches
    - master
    - web
  before_script:
    - pip install flake8==3.9.2 black==22.6.0
  script:
    - black --check --diff .
    - flake8 --exit-zero --show-source --statistics



unit-testing:
  stage: test
  only:
    - tags
    - merge_requests
    - master
    - web
  before_script:
    - pip install .[server,cpu,test]
  script:
    - python3 --version
    - pytest tests/unit --junit-xml=report.xml --cov=asr4 --cov-config=.coveragerc --cov-report=html:coverage --cov-report=term --verbose
  artifacts:
    expire_in: 5 days
    reports:
      junit: report.xml
    paths:
      - coverage/**
  coverage: '/^TOTAL\s+\d+\s+\d+\s+(\d+\.?\d*)\%$/'

functional-testing:endpoints:
  stage: test
  only:
    - tags
    - merge_requests
    - master
    - web
  before_script:
    - wget https://github.com/bojand/ghz/releases/download/v0.111.0/ghz-linux-x86_64.tar.gz
    - tar -xzf ghz-linux-x86_64.tar.gz
    - mv ghz /bin
    - pip install .[client,server,cpu,test]
    - export MODEL_VERSION=$(cat MODELS_VERSION | grep en-us:cpu | awk '/1/ -F " " {print $2}')
    - bash tests/integration/launch_server.sh ${MODELS_PATH}/wav2vec_small_10m.dynamic.uint8.onnx ${MODELS_PATH}/wav2vec_small_10m.dynamic.uint8.dict.ltr.txt ${MODELS_PATH}/formatter/ en-us
  script:
    - cd tests/functional/data
    - bash ../streaming_tests.sh

functional-testing:cpu:
  stage: test
  only:
    - tags
    - merge_requests
    - master
    - web
  before_script:
    - pip install .[server,cpu,test]
  script:
    - pytest tests/functional --junit-xml=report.xml --verbose

functional-testing:e2e:
  stage: test
  only:
    - tags
    - merge_requests
    - master
    - web
  before_script:
    - python -m venv venv-server
    - . ./venv-server/bin/activate
    - pip install .[server,cpu]
    - bash tests/integration/launch_server.sh ${MODELS_PATH}/wav2vec_small_10m.dynamic.uint8.onnx ${MODELS_PATH}/wav2vec_small_10m.dynamic.uint8.dict.ltr.txt ${MODELS_PATH}/formatter/ en-us
  script:
    - apt-get -y -q update && apt-get install -y asrtest-eval
    - deactivate
    - python -m venv venv-client
    - pip install .[client]
    - . ./venv-client/bin/activate
    - ./tests/e2e/run_metrics.sh en-us 0.0.0.0:50051 tests/e2e/data/test_en-us_upgraded-small.gui tests/e2e/data/expected_metrics_functional_testing.json


integration-testing:cpu:
  extends: .template:integration-testing
  stage: test
  only:
    - tags
    - merge_requests
    - web
    - master
  before_script:
    - pip install .[client,server,cpu,test]
    - export MODEL_VERSION=$(cat MODELS_VERSION | grep ${LANGUAGE}:cpu | awk '/1/ -F " " {print $2}')
    - bash tests/integration/launch_server.sh ${MODELS_PATH}/wav2vec_small_10m.dynamic.uint8.onnx ${MODELS_PATH}/wav2vec_small_10m.dynamic.uint8.dict.ltr.txt ${MODELS_PATH}/formatter/ $LANGUAGE 0
    # Install the remaining testing dependencies
    - !reference [.template:integration-testing, before_script]

integration-testing:gpu:
  extends: .template:integration-testing
  stage: test
  image: docker.registry.verbio.com/engineering/devops/debian10-intel-oneapi-python-cuda-tensorrt:3.9
  only:
    - tags
    - merge_requests
    - web
    - master
  tags:
    - gpu
  before_script:
    - . /opt/intel/oneapi/setvars.sh
    - CUDACXX=/usr/local/cuda/bin/nvcc LDFLAGS="-L/intelpython/python3.9/lib/ -liomp5" pip install .[client,server,gpu,test]
    - export MODEL_VERSION=$(cat MODELS_VERSION | grep ${LANGUAGE}:gpu | awk '/1/ -F " " {print $2}')
    - bash tests/integration/launch_server.sh ${MODELS_PATH}/wav2vec_small_10m.dynamic.uint8.onnx ${MODELS_PATH}/wav2vec_small_10m.dynamic.uint8.dict.ltr.txt ${MODELS_PATH}/formatter/ $LANGUAGE 1
    - wget -O - https://pkg-repos.lan.verbio.com/gpg/internal/deb/F2EACE0B.gpg.key | apt-key add -
    - echo 'deb https://pkg-repos.lan.verbio.com/deb/internal jessie stable' | tee /etc/apt/sources.list.d/verbio-internal.list
    # Install the remaining testing dependencies
    - !reference [.template:integration-testing, before_script]


build:python:
  stage: package
  only:
    - tags
    - merge_requests
  before_script:
    - echo JOB_ID=$CI_JOB_ID >> settings.env
    - echo "DOCKER_IMAGE_VERSION = ${DOCKER_IMAGE_VERSION}" >> settings.env
  script:
    - export MAKEFLAGS="-j4"
    - pip install build grpcio grpcio-tools
    - python3 -m build
    - python3 -m grpc_tools.protoc --proto_path=proto --include_imports --include_source_info --descriptor_set_out=proto/asr4-${DOCKER_IMAGE_VERSION}.pb asr4.proto
    - mv dist/*.whl .
    - mv proto/*.pb .
  artifacts:
    expire_in: 2 days
    untracked: true
    paths:
      - "*.whl"
      - "*.pb"
    reports:
      dotenv: settings.env

image:build:cpu:
  variables:
    IMAGE_NAME: "${VERBIO_REGISTRY_URL}/${DOCKER_TESTING_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    DOCKERFILE: "Dockerfile.debian"
    DEVICE: "cpu"
  extends: .template_docker_build
  only:
    - merge_requests

image:build:gpu:
  variables:
    IMAGE_NAME: "${VERBIO_REGISTRY_URL}/${DOCKER_TESTING_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    DEVICE: "gpu"
    DOCKERFILE: "Dockerfile.debian-gpu"
  extends: .template_docker_build
  only:
    - merge_requests

image:release:cpu:
  variables:
    IMAGE_NAME: "${VERBIO_REGISTRY_URL}/${DOCKER_TESTING_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    DOCKERFILE: "Dockerfile.debian"
    DEVICE: "cpu"
  extends: .template_docker_deploy
  only:
    - tags

image:release:gpu:
  variables:
    IMAGE_NAME: "${VERBIO_REGISTRY_URL}/${DOCKER_TESTING_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    DEVICE: "gpu"
    DOCKERFILE: "Dockerfile.debian-gpu"
  extends: .template_docker_deploy
  only: 
    - tags


.template_docker_build:
  stage: build-image
  image: docker:20.10.15
  needs: ["build:python"]
  parallel:
    matrix:
      - LANGUAGE: [en-us, es, pt-br]
  before_script:
    - echo "IMAGE_NAME=${IMAGE_NAME}"
    - export MODEL_VERSION=$(cat MODELS_VERSION | grep ${LANGUAGE}:${DEVICE} | awk '/1/ -F " " {print $2}')
    - echo ${MODEL_VERSION}
    - SERVICE_VERSION=$(cat VERSION)
    - echo SERVICE_VERSION=${SERVICE_VERSION}
    - mv *.whl deploy/docker/
    - cp ${MODELS_PATH}/asr4-${LANGUAGE}-${MODEL_VERSION}.onnx deploy/docker/
    - cp ${MODELS_PATH}/asr4-${LANGUAGE}-${MODEL_VERSION}.dict.ltr.txt deploy/docker/
    - cp ${MODELS_PATH}/wav2vec_small_10m.dynamic.uint8.onnx deploy/docker/
    - cp ${MODELS_PATH}/wav2vec_small_10m.dynamic.uint8.dict.ltr.txt deploy/docker/
    - cp ${MODELS_PATH}/formatter/format-model.${LANGUAGE}* deploy/docker/
    - cp bin/server.py deploy/docker/
  script:
    - docker build --pull deploy/docker/ -f deploy/docker/${DOCKERFILE} --build-arg MODEL_VERSION=${MODEL_VERSION} --build-arg VERSION=${SERVICE_VERSION} --build-arg LANGUAGE=${LANGUAGE} -t "${IMAGE_NAME}"
    
.template_docker_deploy:
    extends:
      - .template_docker_build
    after_script:
      - docker push "${IMAGE_NAME}"
    



testing:integration-testing:cpu:
  extends: .template:integration-testing
  services:
    - name: ${VERBIO_REGISTRY_URL}/${DOCKER_TESTING_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}
      alias: asr4-server
      command: ["env", "/bin/bash", "-c", "/init.sh"]
  variables:
    ASR4_HOSTNAME: asr4-server

testing:integration-testing:gpu:
  extends: .template:integration-testing
  tags:
    - gpu
  before_script:
    # Install docker to run ASR4 server docker
    - !reference [.install-docker, before_script]
    # Launch ASR4 server on GPU
    - export JOB_DOCKER_ID=$(docker ps -q -f "label=com.gitlab.gitlab-runner.job.id=$CI_JOB_ID" -f "label=com.gitlab.gitlab-runner.type=build")
    - docker kill asr4-gpu-${LANGUAGE} || true && docker rm asr4-gpu-${LANGUAGE} || true
    - docker run --name asr4-gpu-${LANGUAGE} -d --gpus=all --network="container:$JOB_DOCKER_ID" -e LOG_LEVEL=DEBUG ${VERBIO_REGISTRY_URL}/${DOCKER_TESTING_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}
    # Install the remaining testing dependencies
    - !reference [.template:integration-testing, before_script]
  after_script:
    - nvidia-smi
    - docker logs asr4-gpu-${LANGUAGE}
    - docker kill asr4-gpu-${LANGUAGE} && docker rm asr4-gpu-${LANGUAGE}


.template:integration-testing:
  stage: integration-testing
  only:
    - tags
  parallel:
    matrix:
      - LANGUAGE: [en-us, es, pt-br]
  before_script:
    - apt-get update && apt-get install -y asrtest-eval libffi-dev
    - pip install .[client,test]
  script:
    - python3 --version
    - pytest tests/integration --junit-xml=report.xml --verbose --capture=no
  artifacts:
    expire_in: 5 days
    reports:
      junit: report.xml

.install-docker:
  before_script:
    - apt-get install -y lsb-release
    - curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/docker.gpg
    - echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/docker.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    - apt-get update && apt-get install -y docker-ce docker-ce-cli containerd.io



staging:promote:
  stage: promote-to-staging
  image: docker:20.10.15
  only:
    - tags
  parallel:
    matrix:
      - LANGUAGE: [en-us, es, pt-br]
  script:
    - OLD_NAME="${VERBIO_REGISTRY_URL}/${DOCKER_TESTING_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - NEW_CPU_NAME="${VERBIO_REGISTRY_URL}/${DOCKER_STAGING_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - docker tag $OLD_NAME $NEW_CPU_NAME
    - docker push $NEW_CPU_NAME
    - OLD_NAME="${VERBIO_REGISTRY_URL}/${DOCKER_TESTING_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - NEW_GPU_NAME="${VERBIO_REGISTRY_URL}/${DOCKER_STAGING_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - docker tag $OLD_NAME $NEW_GPU_NAME
    - docker push $NEW_GPU_NAME
    - echo "Push to Amazon"
    - sh deploy/docker/amazon_login.sh "${AWS_ACCESS_KEY_ID}" "${AWS_SECRET_ACCESS_KEY}" "${AWS_REGION}" "${AWS_ECR_URL}" "${DOCKER_TESTING_IMAGE_NAME}" "${LANGUAGE}"
    - docker tag $NEW_CPU_NAME "${AWS_ECR_URL}/${DOCKER_TESTING_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - docker push "${AWS_ECR_URL}/${DOCKER_TESTING_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - docker tag $NEW_GPU_NAME "${AWS_ECR_URL}/${DOCKER_TESTING_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - docker push "${AWS_ECR_URL}/${DOCKER_TESTING_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"


asr4:benchmark:
  stage: end2end-testing
  only:
    - tags
  variables:
    # A Gitlab bug requires this variable to be CI_COMMIT_TAG instead of DOCKER_IMAGE_VERSION
    TF_VAR_asr4_version: ${CI_COMMIT_TAG}
  trigger:
    project: csr/asr4-benchmark
    strategy: depend


update-changelog:
  stage: update-changelog
  image: docker.registry.verbio.com/engineering/devops/debian10-citbx:1.11.4
  only:
    - tags
  except:
    - branches
  script:
    - citbx create release --private-token ${PRIVATE_TOKEN} --project-id ${CI_PROJECT_ID} --branch ${CI_DEFAULT_BRANCH} --no-manual-review --manual-version ${CI_COMMIT_TAG}


stable:promote:
  stage: promote-to-stable
  image: docker:20.10.15
  only:
    - tags
  parallel:
    matrix:
      - LANGUAGE: [en-us, es, pt-br]
  script:
    - OLD_NAME="${VERBIO_REGISTRY_URL}/${DOCKER_STAGING_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - NEW_CPU_NAME="${VERBIO_REGISTRY_URL}/${DOCKER_STABLE_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - docker tag $OLD_NAME $NEW_CPU_NAME
    - docker push $NEW_CPU_NAME
    - OLD_NAME="${VERBIO_REGISTRY_URL}/${DOCKER_STAGING_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - NEW_GPU_NAME="${VERBIO_REGISTRY_URL}/${DOCKER_STABLE_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - docker tag $OLD_NAME $NEW_GPU_NAME
    - docker push $NEW_GPU_NAME


speech-center:promote:
  stage: promote-to-stable
  image: docker:20.10.15
  only:
    - tags
  parallel:
    matrix:
      - LANGUAGE: [en-us, es, pt-br]
  script:
    - OLD_NAME="${VERBIO_REGISTRY_URL}/${DOCKER_STAGING_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - NEW_CPU_NAME="${VERBIO_REGISTRY_URL}/${DOCKER_SPEECH_CENTER_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - NEW_LATEST_NAME="${VERBIO_REGISTRY_URL}/${DOCKER_SPEECH_CENTER_IMAGE_NAME}-${LANGUAGE}:latest"
    - docker tag $OLD_NAME $NEW_CPU_NAME
    - docker tag $OLD_NAME $NEW_LATEST_NAME
    - docker push $NEW_CPU_NAME
    - docker push $NEW_LATEST_NAME
    - OLD_NAME="${VERBIO_REGISTRY_URL}/${DOCKER_STAGING_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - NEW_GPU_NAME="${VERBIO_REGISTRY_URL}/${DOCKER_SPEECH_CENTER_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - NEW_LATEST_NAME="${VERBIO_REGISTRY_URL}/${DOCKER_SPEECH_CENTER_IMAGE_NAME}-gpu-${LANGUAGE}:latest"
    - docker tag $OLD_NAME $NEW_GPU_NAME
    - docker tag $OLD_NAME $NEW_LATEST_NAME
    - docker push $NEW_GPU_NAME
    - docker push $NEW_LATEST_NAME
    - echo "Push to Amazon"
    - sh deploy/docker/amazon_login.sh "${AWS_ACCESS_KEY_ID}" "${AWS_SECRET_ACCESS_KEY}" "${AWS_SC_REGION}" "${SPEECH_CENTER_AWS_ECR_URL}" "${DOCKER_SPEECH_CENTER_IMAGE_NAME}" "${LANGUAGE}"
    - docker tag $NEW_CPU_NAME "${SPEECH_CENTER_AWS_ECR_URL}/${DOCKER_SPEECH_CENTER_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - docker push "${SPEECH_CENTER_AWS_ECR_URL}/${DOCKER_SPEECH_CENTER_IMAGE_NAME}-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - docker tag $NEW_GPU_NAME "${SPEECH_CENTER_AWS_ECR_URL}/${DOCKER_SPEECH_CENTER_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"
    - docker push "${SPEECH_CENTER_AWS_ECR_URL}/${DOCKER_SPEECH_CENTER_IMAGE_NAME}-gpu-${LANGUAGE}:${DOCKER_IMAGE_VERSION}"




stable:deploy:cpu:
  stage: stable-deploy
  image: docker.registry.verbio.com/cognitive/nomad:1.0.2
  only:
    - tags
  dependencies:
    - build:python
  environment:
    name: production/asr4
    action: start
  script:
    - cd deploy/nomad
    - export NOMAD_IP=$(echo ${CI_ENVIRONMENT_URL} | cut -d / -f 3 | cut -d ':' -f 1)
    - export NOMAD_ADDR=http://$NOMAD_IP:4646
    - echo "Deploying CPU stable version ${DOCKER_IMAGE_VERSION} into ${NOMAD_ADDR}"
    - NOMAD_VAR_VERSION=${DOCKER_IMAGE_VERSION} NOMAD_VAR_ASR4_JOB_ID=${JOB_ID} NOMAD_VAR_GITLAB_TOKEN=${GITLAB_TOKEN} nomad job run asr4-stable.nomad


cleanup:
  stage: cleanup
  image: docker:20.10.15
  only:
    - tags
    - merge_requests
  script:
    - docker images --filter 'label=service=asr4'
    - docker images --filter 'label=service=asr4' -q | xargs -r docker image rm --force

speech-center-integration-testing:en-us:cpu:
  variables:
    TEST_SERVICE_NAME: "asr4-en-us"
    # A Gitlab bug requires this variable to be CI_COMMIT_TAG instead of DOCKER_IMAGE_VERSION
    TEST_SERVICE_COMMIT_TAG: ${CI_COMMIT_TAG}
  extends: .template:speech-center-integration-testing

speech-center-integration-testing:es:cpu:
  variables:
    TEST_SERVICE_NAME: "asr4-es"
    # A Gitlab bug requires this variable to be CI_COMMIT_TAG instead of DOCKER_IMAGE_VERSION
    TEST_SERVICE_COMMIT_TAG: ${CI_COMMIT_TAG}
  extends: .template:speech-center-integration-testing

speech-center-integration-testing:pt-br:cpu:
  variables:
    TEST_SERVICE_NAME: "asr4-pt-br"
    # A Gitlab bug requires this variable to be CI_COMMIT_TAG instead of DOCKER_IMAGE_VERSION
    TEST_SERVICE_COMMIT_TAG: ${CI_COMMIT_TAG}
  extends: .template:speech-center-integration-testing

speech-center-integration-testing:en-us:gpu:
  variables:
    TEST_SERVICE_NAME: "asr4-gpu-en-us"
    # A Gitlab bug requires this variable to be CI_COMMIT_TAG instead of DOCKER_IMAGE_VERSION
    TEST_SERVICE_COMMIT_TAG: ${CI_COMMIT_TAG}
  extends: .template:speech-center-integration-testing

speech-center-integration-testing:es:gpu:
  variables:
    TEST_SERVICE_NAME: "asr4-gpu-es"
    # A Gitlab bug requires this variable to be CI_COMMIT_TAG instead of DOCKER_IMAGE_VERSION
    TEST_SERVICE_COMMIT_TAG: ${CI_COMMIT_TAG}
  extends: .template:speech-center-integration-testing

speech-center-integration-testing:pt-br:gpu:
  variables:
    TEST_SERVICE_NAME: "asr4-gpu-pt-br"
    # A Gitlab bug requires this variable to be CI_COMMIT_TAG instead of DOCKER_IMAGE_VERSION
    TEST_SERVICE_COMMIT_TAG: ${CI_COMMIT_TAG}
  extends: .template:speech-center-integration-testing


.template:speech-center-integration-testing:
  stage: speech-center-integration-testing
  only:
    - tags
  trigger:
    project: voice-center/operations/integration/integration-tests
    strategy: depend
